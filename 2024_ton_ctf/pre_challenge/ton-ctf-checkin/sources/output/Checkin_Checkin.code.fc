#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "Checkin_Checkin.headers.fc";
#include "Checkin_Checkin.stdlib.fc";
#include "Checkin_Checkin.storage.fc";

;;
;; Contract Checkin functions
;;

(int) $Checkin$_contract_init(int $c) impure inline_ref {
    var (($self'counter)) = (null());
    $self'counter = 0;
    return ($self'counter);
}

((int), int) $Checkin$_fun_get_counter((int) $self) impure inline_ref {
    var (($self'counter)) = $self;
    var $fresh$ret_0 = $self'counter;
    return (($self'counter), $fresh$ret_0);
}

((int), int) $Checkin$_fun_is_solved((int) $self) impure inline_ref {
    var (($self'counter)) = $self;
    var $fresh$ret_1 = ($self'counter == 100);
    return (($self'counter), $fresh$ret_1);
}

;;
;; Receivers of a Contract Checkin
;;

((int), ()) $Checkin$_internal_text_2a3ba71f2e130777c61c5394b865df005ee19f22e4b175e2807176e2df2d5332((int) $self) impure inline {
    var ($self'counter) = $self;
    $self'counter = ($self'counter + 1);
    return (($self'counter), ());
}

((int), ()) $Checkin$_internal_text_4d73c4b7b09d6e1e50e4a7d9dcf06c84d3a6a1e4c581ab2e662f19ab4d235e67((int) $self) impure inline {
    var ($self'counter) = $self;
    $self'counter = 100;
    return (($self'counter), ());
}

;;
;; Get methods of a Contract Checkin
;;

_ %get_counter() method_id(127487) {
    var self = $Checkin$_contract_load();
    var res = self~$Checkin$_fun_get_counter();
    return res;
}

_ %is_solved() method_id(94482) {
    var self = $Checkin$_contract_load();
    var res = self~$Checkin$_fun_is_solved();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Checkin
;;

((int), int) $Checkin$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "increase: 1" message
        if (text_op == 0x2a3ba71f2e130777c61c5394b865df005ee19f22e4b175e2807176e2df2d5332) {
            self~$Checkin$_internal_text_2a3ba71f2e130777c61c5394b865df005ee19f22e4b175e2807176e2df2d5332();
            return (self, true);
        }
        
        ;; Receive "set" message
        if (text_op == 0x4d73c4b7b09d6e1e50e4a7d9dcf06c84d3a6a1e4c581ab2e662f19ab4d235e67) {
            self~$Checkin$_internal_text_4d73c4b7b09d6e1e50e4a7d9dcf06c84d3a6a1e4c581ab2e662f19ab4d235e67();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Checkin$_contract_load();
    
    ;; Handle operation
    int handled = self~$Checkin$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Checkin$_contract_store(self);
}
